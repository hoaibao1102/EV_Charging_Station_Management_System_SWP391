import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import "./StationDetail.css";
import { stationAPI } from "../../api/stationApi.js";
import { getMyVehiclesApi } from "../../api/driverApi.js";

const StationDetail = () => {
  const { id } = useParams();
  const navigate = useNavigate();

  const [station, setStation] = useState(null);
  const [chargingPoints, setChargingPoints] = useState([]);
  const [myVehicles, setMyVehicles] = useState([]);
  const [selectedVehicle, setSelectedVehicle] = useState(null);
  const [connectorTypes, setConnectorTypes] = useState([]);
  const [expandedPoint, setExpandedPoint] = useState(null);
  const [loading, setLoading] = useState(true);

  // ====== Fetch d·ªØ li·ªáu ======
  useEffect(() => {
    const fetchData = async () => {
      try {
        setLoading(true);

        // const stationRes = await stationAPI.getStationById(id);
        const stationRes = await stationAPI.getStationById(id);

        // ‚úÖ Fix: n·∫øu tr·∫£ v·ªÅ m·∫£ng, l·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
        const st = Array.isArray(stationRes.data)
          ? stationRes.data[0]
          : stationRes.data;
        setStation(st);

        const [pointsRes, connectorsRes] = await Promise.all([
          stationAPI.getChargingPointsByStationId(id),
          stationAPI.getConnectorTypes(),
        ]);

        // console.log("üîã Charging Points:", pointsRes.data);
        // console.log("üîå Connector Types:", connectorsRes.data);

        setChargingPoints(pointsRes.data);
        setConnectorTypes(connectorsRes.data);

        // L·∫•y danh s√°ch xe c·ªßa t√†i x·∫ø
        const myVehiclesRes = await getMyVehiclesApi();
        // console.log("üöó My Vehicles:", myVehiclesRes.data);

        setMyVehicles(myVehiclesRes.data);

        // T·ª± ƒë·ªông ch·ªçn xe ƒë·∫ßu ti√™n n·∫øu c√≥
        if (myVehiclesRes.data?.length > 0) {
          // console.log("‚úÖ Auto-selecting first vehicle:", myVehiclesRes.data[0]);
          setSelectedVehicle(myVehiclesRes.data[0]);
        }
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [id]);

  // ====== T√¨m th√¥ng tin connector theo connectorTypeId ======
  const getConnectorDetail = (connectorTypeId) => {
    const result = connectorTypes.find(
      (c) => String(c.connectorTypeId) === String(connectorTypeId)
    );

    if (!result) {
      // console.log(`‚ö†Ô∏è Connector not found for ID: ${connectorTypeId}`, {
      //   searchId: connectorTypeId,
      //   availableIds: connectorTypes.map((c) => c.connectorTypeId),
      // });
    }

    return result;
  };

  // ====== Ki·ªÉm tra tr·ª• c√≥ t∆∞∆°ng th√≠ch v·ªõi xe ƒë∆∞·ª£c ch·ªçn kh√¥ng ======
  const isPointCompatible = (point) => {
    // N·∫øu kh√¥ng c√≥ xe ƒë∆∞·ª£c ch·ªçn ‚Üí return false (kh√¥ng t∆∞∆°ng th√≠ch)
    if (!selectedVehicle) {
      return false;
    }

    // L·∫•y th√¥ng tin connector c·ªßa tr·ª• n√†y
    const connector = getConnectorDetail(
      point.connectorTypeId || point.ConnectorTypeID
    );
    if (!connector) {
      console.log(
        `‚ùå Kh√¥ng t√¨m th·∫•y connector cho tr·ª• ${
          point.pointNumber || point.PointNumber
        }`,
        {
          pointConnectorTypeID: point.connectorTypeId || point.ConnectorTypeID,
          availableConnectorTypes: connectorTypes.map((c) => ({
            id: c.connectorTypeId,
            name: c.displayName,
            code: c.code,
          })),
        }
      );
      return false;
    }

    // ‚úÖ S·ª≠ d·ª•ng connectorTypeName thay v√¨ connectorType
    const vehicleConnectorName =
      selectedVehicle.connectorTypeName || selectedVehicle.connectorType;

    if (!vehicleConnectorName) {
      console.log("‚ùå Xe kh√¥ng c√≥ connectorTypeName:", selectedVehicle);
      return false;
    }

    // So kh·ªõp connectorTypeName c·ªßa xe v·ªõi connector.displayName
    const vehicleType = vehicleConnectorName.toLowerCase().trim();
    const connectorName = (connector.displayName || "").toLowerCase().trim();
    const connectorCode = (connector.code || "").toLowerCase().trim();

    const isCompatible =
      connectorName.includes(vehicleType) ||
      connectorCode.includes(vehicleType) ||
      connectorName === vehicleType ||
      connectorCode === vehicleType ||
      vehicleType.includes(connectorName) ||
      vehicleType.includes(connectorCode);

    console.log(
      `üîç Checking compatibility for ${
        point.pointNumber || point.PointNumber
      }:`,
      {
        vehicleConnectorTypeName: vehicleConnectorName,
        connectorDisplayName: connector.displayName,
        connectorCode: connector.code,
        isCompatible,
      }
    );

    return isCompatible;
  };

  // ====== Ph√¢n nh√≥m tr·ª• ph√π h·ª£p / kh√¥ng ph√π h·ª£p ======
  const groupChargingPoints = () => {
    console.log("üìä Grouping charging points...", {
      selectedVehicle,
      totalPoints: chargingPoints.length,
      totalConnectorTypes: connectorTypes.length,
    });

    if (!selectedVehicle) {
      console.log("‚ö†Ô∏è No vehicle selected - showing all points");
      return { compatible: chargingPoints, others: [] };
    }

    const compatible = chargingPoints.filter((p) => isPointCompatible(p));
    const others = chargingPoints.filter((p) => !isPointCompatible(p));

    console.log("‚úÖ Grouping result:", {
      compatible: compatible.length,
      others: others.length,
      compatiblePoints: compatible.map((p) => p.PointNumber),
      otherPoints: others.map((p) => p.PointNumber),
    });

    return { compatible, others };
  };

  const { compatible, others } = groupChargingPoints();

  // ====== Toggle m·ªü r·ªông tr·ª• ======
  const toggleExpand = (pointId) =>
    setExpandedPoint(expandedPoint === pointId ? null : pointId);

  const handleBooking = (pointId, connectorId) => {
    // Ki·ªÉm tra xem ƒë√£ ch·ªçn xe ch∆∞a
    if (!selectedVehicle) {
      alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn xe tr∆∞·ªõc khi ƒë·∫∑t ch·ªó!");
      return;
    }

    console.log(`üìÖ Booking Point: ${pointId}, Connector: ${connectorId}`);
    navigate(`/bookings`);
  };

  const handleVehicleChange = (e) => {
    const vehicleId = parseInt(e.target.value);
    console.log("üöó Vehicle changed:", { vehicleId });

    if (!vehicleId) {
      console.log("‚ö†Ô∏è No vehicle selected (showing all)");
      setSelectedVehicle(null);
      return;
    }

    const vehicle = myVehicles.find((v) => v.vehicleId === vehicleId);
    console.log("‚úÖ Selected vehicle:", vehicle);
    setSelectedVehicle(vehicle || null);
  };

  // ====== Loading / Error ======
  if (loading)
    return (
      <div className="station-container">
        <div className="loading">ƒêang t·∫£i d·ªØ li·ªáu...</div>
      </div>
    );

  if (!station)
    return (
      <div className="station-container">
        <h3>Kh√¥ng t√¨m th·∫•y tr·∫°m s·∫°c</h3>
        <button onClick={() => navigate(-1)}>‚Üê Quay l·∫°i</button>
      </div>
    );

  // ====== Giao di·ªán ch√≠nh ======
  return (
    <div className="station-container">
      <button className="btn-back" onClick={() => navigate(-1)}>
        ‚Üê Quay l·∫°i danh s√°ch
      </button>

      <h1 className="station-title">
        {station?.StationName || station?.stationName || "Tr·∫°m s·∫°c"}
      </h1>
      <p className="station-address">
        üìç {station?.Address || station?.address || "ƒêang c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ"}
      </p>

      {/* ====== Dropdown ch·ªçn xe ho·∫∑c th√¥ng b√°o th√™m xe ====== */}
      {myVehicles?.length > 0 ? (
        <div className="vehicle-selector">
          <label htmlFor="vehicle-select" className="selector-label">
            üöó Ch·ªçn xe b·∫°n mu·ªën s·∫°c:
          </label>
          <select
            id="vehicle-select"
            value={selectedVehicle?.vehicleId || ""}
            onChange={handleVehicleChange}
            className="vehicle-dropdown"
          >
            <option value="">-- Hi·ªÉn th·ªã t·∫•t c·∫£ tr·ª• --</option>
            {myVehicles.map((vehicle) => (
              <option key={vehicle.vehicleId} value={vehicle.vehicleId}>
                {vehicle.vehicleName} ({vehicle.brand} {vehicle.model}) - üîå{" "}
                {vehicle.connectorTypeName || vehicle.connectorType || "N/A"}
              </option>
            ))}
          </select>
          {!selectedVehicle && (
            <p
              style={{
                color: "#ff9800",
                marginTop: "10px",
                fontSize: "14px",
                fontWeight: "500",
              }}
            >
              ‚ö†Ô∏è Vui l√≤ng ch·ªçn xe ƒë·ªÉ xem tr·ª• s·∫°c t∆∞∆°ng th√≠ch v√† ƒë·∫∑t ch·ªó
            </p>
          )}
        </div>
      ) : (
        <div
          className="vehicle-selector"
          style={{
            background: "linear-gradient(135deg, #fff3e0 0%, #ffe0b2 100%)",
            border: "2px solid #ff9800",
            padding: "20px",
            borderRadius: "12px",
          }}
        >
          <p
            style={{
              color: "#e65100",
              fontSize: "16px",
              fontWeight: "600",
              marginBottom: "15px",
              display: "flex",
              alignItems: "center",
              gap: "8px",
            }}
          >
            üöó B·∫°n ch∆∞a c√≥ xe n√†o trong danh s√°ch
          </p>
          <p
            style={{
              color: "#f57c00",
              fontSize: "14px",
              marginBottom: "15px",
            }}
          >
            Vui l√≤ng th√™m xe c·ªßa b·∫°n ƒë·ªÉ ƒë·∫∑t ch·ªó s·∫°c
          </p>
          <button
            onClick={() => navigate("/profile/my-vehicle")}
            style={{
              background: "linear-gradient(135deg, #ff9800 0%, #f57c00 100%)",
              color: "white",
              border: "none",
              padding: "12px 24px",
              borderRadius: "8px",
              fontSize: "15px",
              fontWeight: "600",
              cursor: "pointer",
              transition: "all 0.3s ease",
              boxShadow: "0 4px 12px rgba(255, 152, 0, 0.3)",
            }}
            onMouseOver={(e) => {
              e.currentTarget.style.transform = "translateY(-2px)";
              e.currentTarget.style.boxShadow =
                "0 6px 16px rgba(255, 152, 0, 0.4)";
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.transform = "translateY(0)";
              e.currentTarget.style.boxShadow =
                "0 4px 12px rgba(255, 152, 0, 0.3)";
            }}
          >
            ‚ûï Th√™m xe c·ªßa t√¥i
          </button>
        </div>
      )}

      {/* ====== Danh s√°ch tr·ª• ph√π h·ª£p ====== */}
      <div className="point-section">
        {selectedVehicle && compatible.length > 0 && (
          <h3 className="section-title">‚úÖ Ph√π h·ª£p v·ªõi xe b·∫°n</h3>
        )}
        {compatible.map((point) => {
          const pointId = point.pointId || point.PointID;
          const pointNumber = point.pointNumber || point.PointNumber;
          const status = point.status || point.Status;
          const maxPowerKW = point.maxPowerKW || point.MaxPowerKW;
          const lastMaintenanceDate =
            point.lastMaintenanceDate || point.LastMaintenanceDate;
          const connectorTypeId =
            point.connectorTypeId || point.ConnectorTypeID;

          const expanded = expandedPoint === pointId;
          const connector = getConnectorDetail(connectorTypeId);

          return (
            <div
              key={pointId}
              className={`point-card ${expanded ? "expanded" : ""} compatible`}
              onClick={() => toggleExpand(pointId)}
            >
              <div className="point-header">
                <div className="point-info">
                  <h3>üîã {pointNumber}</h3>
                  <p>{status === "available" ? "S·∫µn s√†ng" : status}</p>
                </div>
                <div className={`status-dot ${status?.toLowerCase()}`}></div>
              </div>

              <div className="point-meta">
                <span>‚ö° C√¥ng su·∫•t: {maxPowerKW} kW</span>
                <span>üîß B·∫£o tr√¨: {lastMaintenanceDate || "N/A"}</span>
              </div>

              {expanded && connector && (
                <div className="connector-panel">
                  <h4>üîå C·ªïng s·∫°c t∆∞∆°ng th√≠ch</h4>
                  <div className="connector-item">
                    <div className="connector-info">
                      <strong>{connector.displayName}</strong>
                      <p>M√£: {connector.code}</p>
                      <p>Ch·∫ø ƒë·ªô: {connector.mode}</p>
                      <p>‚ö° {connector.defaultMaxPowerKW} kW</p>
                    </div>
                    <div className="connector-actions">
                      <div
                        className={`mode-tag ${connector.mode?.toLowerCase()}`}
                      >
                        {connector.mode}
                      </div>
                      {status?.toLowerCase() === "available" &&
                        selectedVehicle && (
                          <button
                            className="btn-book-small"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleBooking(pointId, connector.connectorTypeId);
                            }}
                          >
                            üìÖ ƒê·∫∑t ch·ªó
                          </button>
                        )}
                      {status?.toLowerCase() === "available" &&
                        !selectedVehicle && (
                          <p
                            style={{
                              color: "#ff9800",
                              fontSize: "13px",
                              fontWeight: "500",
                              margin: "5px 0",
                            }}
                          >
                            ‚ö†Ô∏è Ch·ªçn xe ƒë·ªÉ ƒë·∫∑t ch·ªó
                          </p>
                        )}
                    </div>
                  </div>
                </div>
              )}
            </div>
          );
        })}
      </div>

      {/* ====== NgƒÉn c√°ch gi·ªØa nh√≥m ====== */}
      {selectedVehicle && others.length > 0 && (
        <div className="divider">
          <h3 className="section-title">‚ö†Ô∏è Kh√¥ng ph√π h·ª£p v·ªõi xe b·∫°n</h3>
        </div>
      )}

      {/* ====== Danh s√°ch tr·ª• kh√¥ng ph√π h·ª£p ====== */}
      <div className="point-section">
        {others.map((point) => {
          const pointId = point.pointId || point.PointID;
          const pointNumber = point.pointNumber || point.PointNumber;
          const status = point.status || point.Status;
          const maxPowerKW = point.maxPowerKW || point.MaxPowerKW;
          const lastMaintenanceDate =
            point.lastMaintenanceDate || point.LastMaintenanceDate;
          const connectorTypeId =
            point.connectorTypeId || point.ConnectorTypeID;

          const expanded = expandedPoint === pointId;
          const connector = getConnectorDetail(connectorTypeId);

          return (
            <div
              key={pointId}
              className={`point-card ${
                expanded ? "expanded" : ""
              } not-compatible`}
              onClick={() => toggleExpand(pointId)}
            >
              <div className="point-header">
                <div className="point-info">
                  <h3>üîã {pointNumber}</h3>
                  <p>{status === "available" ? "S·∫µn s√†ng" : status}</p>
                </div>
                <div className={`status-dot ${status?.toLowerCase()}`}></div>
              </div>

              <div className="point-meta">
                <span>‚ö° C√¥ng su·∫•t: {maxPowerKW} kW</span>
                <span>üîß B·∫£o tr√¨: {lastMaintenanceDate || "N/A"}</span>
              </div>

              {expanded && connector && (
                <div className="connector-panel">
                  <h4>üîå C·ªïng s·∫°c</h4>
                  <div className="connector-item">
                    <div className="connector-info">
                      <strong>{connector.displayName}</strong>
                      <p>M√£: {connector.code}</p>
                      <p>Ch·∫ø ƒë·ªô: {connector.mode}</p>
                      <p>‚ö° {connector.defaultMaxPowerKW} kW</p>
                    </div>
                    <div className="connector-actions">
                      <div
                        className={`mode-tag ${connector.mode?.toLowerCase()}`}
                      >
                        {connector.mode}
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default StationDetail;
